#!/usr/bin/env python3
import configparser
import contextlib
import io
import logging
import os
import pickle
import sys
import unittest
import urllib

import archmap


logging.disable(60)


class WikiParserTestCase(unittest.TestCase):
    """These tests test the wiki parser in the get_users() function
    """

    # 'ArchMap_List-stripped.html' is a stripped down page of HTML
    # including the tags needed for parsing and some test data
    wiki_html = 'tests/ArchMap_List-stripped.html'

    # 'sample-raw.txt' contains the extracted list from 'ArchMap_List-stripped.html'
    # The trailing newline needs to be stripped to match the output from 'get_users'
    with open('tests/sample-raw.txt', 'r') as raw_users:
        raw_users = raw_users.read().rstrip('\n')

    def setUp(self):
        # Set 'maxDiff' to 'None' to be able to see long diffs when something goes wrong.
        self.maxDiff = None

    def test_wiki_parser(self):
        output_get_users = archmap.get_users(local=self.wiki_html)
        self.assertEqual(self.raw_users, output_get_users)

    def test_internet(self):
        # Mock out the internet connection using an offline copy
        def mock_urlopen(url):
            with open('tests/ArchMap_List-stripped.html', 'rb') as test_page:
                test_string = io.BytesIO(test_page.read())
            return test_string

        # Reassign the 'urlopen' function to use the mock one
        archmap.urlopen = mock_urlopen

        # Check that the returned string equals the raw text
        self.assertEqual(self.raw_users, archmap.get_users())

        # Restore the original call
        archmap.urlopen = urllib.request.urlopen

    def test_error(self):
        # Fake an error when the function is called
        def mock_error(url):
            raise urllib.error.URLError('Simulated test error')

        # Reassign the 'urlopen' function to use the mock one
        archmap.urlopen = mock_error

        # Check that the function returns 'None' when there is a connection error
        self.assertIsNone(archmap.get_users())

        # Restore the original call
        archmap.urlopen = urllib.request.urlopen


class ListParserTestCase(unittest.TestCase):
    """These tests test that the list parser is working correctly
    """

    # 'sample-raw.txt' contains an unformatted 'raw' sample list
    with open('tests/sample-raw.txt', 'r') as raw_users_file:
        raw_users = raw_users_file.read()

    # 'sample_archmap.txt' contains a formatted sample list equivilent to the raw version above
    with open('tests/sample-archmap.txt', 'r') as sample_text_file:
        sample_text = sample_text_file.read()

    # 'sample_parsed_users.pickle' is a pickled list that was generated with a known good list
    # ('parse_users()' was run on 'sample-archmap.txt' and the output was pickled)
    with open('tests/sample-parsed_users.pickle', 'rb') as pickled_input:
        sample_parsed_users = pickle.load(pickled_input)

    def setUp(self):
        # Set 'maxDiff' to 'None' to be able to see long diffs when something goes wrong.
        self.maxDiff = None

    def test_list_parser_raw(self):
        parsed_raw_users = archmap.parse_users(self.raw_users)
        self.assertEqual(self.sample_parsed_users, parsed_raw_users)

    def test_list_parser_cleaned(self):
        parsed_cleaned_users = archmap.parse_users(self.sample_text)
        self.assertEqual(self.sample_parsed_users, parsed_cleaned_users)


class OutputTestCase(unittest.TestCase):
    """These tests compare the output of ``make_text()``, ``make_geojson()``, ``make_kml()``  and ``make csv()``
    with pre-generated versions that have been checked manually, these *sample* files were
    generated by running ``archmap.py`` on the stripped-down/handmade ``ArchMap_List-stripped.html'``.
    """

    # 'sample_parsed_users.pickle' is a pickled list that was generated with a known good list
    # ('parse_users()' was run on 'sample-archmap.txt' and the output was pickled)
    with open('tests/sample-parsed_users.pickle', 'rb') as pickled_input:
        parsed_users = pickle.load(pickled_input)

    def setUp(self):
        self.sample_text = 'tests/sample-archmap.txt'
        self.output_text = 'tests/output-archmap.txt'
        self.sample_pretty_text = 'tests/sample-archmap_pretty.txt'
        self.output_pretty_text = 'tests/output-archmap_pretty.txt'
        self.sample_geojson = 'tests/sample-archmap.geojson'
        self.output_geojson = 'tests/output-archmap.geojson'
        self.sample_kml = 'tests/sample-archmap.kml'
        self.output_kml = 'tests/output-archmap.kml'
        self.sample_csv = 'tests/sample-archmap.csv'
        self.output_csv = 'tests/output-archmap.csv'

        # Set 'maxDiff' to 'None' to be able to see long diffs when something goes wrong.
        self.maxDiff = None

    def tearDown(self):
        try:
            os.remove(self.output_text)
            os.remove(self.output_pretty_text)
            os.remove(self.output_geojson)
            os.remove(self.output_kml)
            os.remove(self.output_csv)
        except FileNotFoundError:
            pass

    def test_text(self):
        archmap.make_text(self.parsed_users, self.output_text)

        with open(self.sample_text, 'r') as file:
            sample_text = file.read()
        with open(self.output_text, 'r') as file:
            output_text = file.read()

        self.assertEqual(sample_text, output_text)

    def test_pretty_text(self):
        archmap.make_text(self.parsed_users, self.output_pretty_text, pretty=True)

        with open(self.sample_pretty_text, 'r') as file:
            sample_pretty_text = file.read()
        with open(self.output_pretty_text, 'r') as file:
            output_pretty_text = file.read()

        self.assertEqual(sample_pretty_text, output_pretty_text)

    def test_geojson(self):
        archmap.make_geojson(self.parsed_users, self.output_geojson)

        with open(self.sample_geojson, 'r') as file:
            sample_geojson = file.read()
        with open(self.output_geojson, 'r') as file:
            output_geojson = file.read()

        self.assertEqual(sample_geojson, output_geojson)

    def test_kml(self):
        archmap.make_kml(self.parsed_users, self.output_kml)

        with open(self.sample_kml, 'r') as file:
            sample_kml = file.read()
        with open(self.output_kml, 'r') as file:
            output_kml = file.read()

        self.assertEqual(sample_kml, output_kml)

    def test_csv(self):
        archmap.make_csv(self.parsed_users, self.output_csv)

        with open(self.sample_csv, 'r') as file:
            sample_csv = file.read()
        with open(self.output_csv, 'r') as file:
            output_csv = file.read()

        self.assertEqual(sample_csv, output_csv)


class ReturnedTestCase(unittest.TestCase):
    """These tests compare the return values of ``make_text()``, ``make_geojson()``, ``make_kml()``  and ``make csv()``
    with pre-generated versions that have been checked manually, these *sample* files were
    generated by running ``archmap.py`` on the stripped-down/handmade ``ArchMap_List-stripped.html'``.
    """

    # 'sample_parsed_users.pickle' is a pickled list that was generated with a known good list
    # ('parse_users()' was run on 'sample-archmap.txt' and the output was pickled)
    with open('tests/sample-parsed_users.pickle', 'rb') as pickled_input:
        parsed_users = pickle.load(pickled_input)

    def setUp(self):
        self.sample_text = 'tests/sample-archmap.txt'
        self.sample_pretty_text = 'tests/sample-archmap_pretty.txt'
        self.sample_geojson = 'tests/sample-archmap.geojson'
        self.sample_kml = 'tests/sample-archmap.kml'
        self.sample_csv = 'tests/sample-archmap.csv'

        # Set 'maxDiff' to 'None' to be able to see long diffs when something goes wrong.
        self.maxDiff = None

    def test_text(self):
        returned_text = archmap.make_text(self.parsed_users)

        with open(self.sample_text, 'r') as file:
            sample_text = file.read()
        self.assertEqual(sample_text, returned_text)

    def test_pretty_text(self):
        returned_pretty_text = archmap.make_text(self.parsed_users, pretty=True)

        with open(self.sample_pretty_text, 'r') as file:
            sample_pretty_text = file.read()
        self.assertEqual(sample_pretty_text, returned_pretty_text)

    def test_geojson(self):
        returned_geojson = archmap.make_geojson(self.parsed_users)

        with open(self.sample_geojson, 'r') as file:
            sample_geojson = file.read()
        self.assertEqual(sample_geojson, returned_geojson)

    def test_kml(self):
        returned_kml = archmap.make_kml(self.parsed_users)

        with open(self.sample_kml, 'r') as file:
            sample_kml = file.read()
        self.assertEqual(sample_kml, returned_kml)

    def test_csv(self):
        returned_csv = archmap.make_csv(self.parsed_users)

        with open(self.sample_csv, 'r') as file:
            sample_csv = file.read()
        self.assertEqual(sample_csv, returned_csv)


class InteractiveTestCase(unittest.TestCase):
    """These tests test the interactive part of the script - the "main()" function
    """

    def setUp(self):
        self.sample_text = 'tests/sample-archmap.txt'
        self.output_text = 'tests/interactive_output-archmap.txt'
        self.sample_pretty_text = 'tests/sample-archmap_pretty.txt'
        self.output_pretty_text = 'tests/interactive_output-archmap_pretty.txt'
        self.sample_geojson = 'tests/sample-archmap.geojson'
        self.output_geojson = 'tests/interactive_output-archmap.geojson'
        self.sample_kml = 'tests/sample-archmap.kml'
        self.output_kml = 'tests/interactive_output-archmap.kml'
        self.sample_csv = 'tests/sample-archmap.csv'
        self.output_csv = 'tests/interactive_output-archmap.csv'

        # Set 'maxDiff' to 'None' to be able to see long diffs when something goes wrong.
        self.maxDiff = None

        sys.argv = ['test',
                    '--file', 'tests/ArchMap_List-stripped.html',
                    '--text', self.output_text,
                    '--geojson', self.output_geojson,
                    '--kml', self.output_kml,
                    '--csv', self.output_csv]

        archmap.main()

        # Make a prettyfied user file
        sys.argv = ['test',
                    '--file', 'tests/ArchMap_List-stripped.html',
                    '--pretty',
                    '--text', self.output_pretty_text,
                    '--geojson', 'no',
                    '--kml', 'no',
                    '--csv', 'no']

        archmap.main()

    def tearDown(self):
        try:
            os.remove(self.output_text)
            os.remove(self.output_pretty_text)
            os.remove(self.output_geojson)
            os.remove(self.output_kml)
            os.remove(self.output_csv)
        except FileNotFoundError:
            pass

    def test_text(self):
        with open(self.sample_text, 'r') as file:
            sample_text = file.read()
        with open(self.output_text, 'r') as file:
            output_text = file.read()

        self.assertEqual(sample_text, output_text)

    def test_pretty_text(self):
        with open(self.sample_pretty_text, 'r') as file:
            sample_pretty_text = file.read()
        with open(self.output_pretty_text, 'r') as file:
            output_pretty_text = file.read()

        self.assertEqual(sample_pretty_text, output_pretty_text)

    def test_geojson(self):
        with open(self.sample_geojson, 'r') as file:
            sample_geojson = file.read()
        with open(self.output_geojson, 'r') as file:
            output_geojson = file.read()

        self.assertEqual(sample_geojson, output_geojson)

    def test_kml(self):
        with open(self.sample_kml, 'r') as file:
            sample_kml = file.read()
        with open(self.output_kml, 'r') as file:
            output_kml = file.read()

        self.assertEqual(sample_kml, output_kml)

    def test_csv(self):
        with open(self.sample_csv, 'r') as file:
            sample_csv = file.read()
        with open(self.output_csv, 'r') as file:
            output_csv = file.read()

        self.assertEqual(sample_csv, output_csv)

    def test_piped_output(self):
        # Make a string of all of the piped outputs
        sys.argv = ['test',
                    '--file', 'tests/ArchMap_List-stripped.html',
                    '--text', '-',
                    '--geojson', '-',
                    '--kml', '-',
                    '--csv', '-']

        piped_output = io.StringIO()
        with contextlib.redirect_stdout(piped_output):
            archmap.main()
        piped_output_str = piped_output.getvalue()

        with open(self.sample_text, 'r') as file:
            sample_text = file.read() + '\n'
        with open(self.sample_geojson, 'r') as file:
            sample_geojson = file.read() + '\n'
        with open(self.sample_kml, 'r') as file:
            sample_kml = file.read() + '\n'
        with open(self.sample_csv, 'r') as file:
            sample_csv = file.read() + '\n'

        combined_string = sample_text + sample_geojson + sample_kml + sample_csv

        self.assertEqual(combined_string, piped_output_str)


class LoggingTestCase(unittest.TestCase):
    """These tests check that the logging messages are output correctly
    """

    nothing_to_do_msg = 'There is nothing to do'
    cannot_connect_msg = "Can't connect to the ArchWiki"
    no_config_msg = 'Warning: Configuation file does not exist. Using defaults'

    def setUp(self):
        logging.disable(logging.NOTSET)

    def tearDown(self):
        logging.disable(60)

    def test_nothing_to_do(self):
        sys.argv = ['test',
                    '--text', 'no',
                    '--geojson', 'no',
                    '--kml', 'no',
                    '--csv', 'no']

        with self.assertLogs(logger=archmap.log, level='WARNING') as logcatcher:
            archmap.main()
        self.assertIn('WARNING:archmap:{}'.format(self.nothing_to_do_msg), logcatcher.output)

    def test_bad_url(self):
        sys.argv = ['test',
                    '--url', 'http://127.0.0.1/archmap-test',
                    '--text', '-',
                    '--geojson', '-',
                    '--kml', '-',
                    '--csv', '-']

        with self.assertLogs(logger=archmap.log, level='CRITICAL') as logcatcher:
            archmap.main()
        self.assertIn('CRITICAL:archmap:{}'.format(self.cannot_connect_msg), logcatcher.output)

    def test_no_config_file(self):
        sys.argv = ['test',
                    '--config', '/dev/null',
                    '--text', 'no',
                    '--geojson', 'no',
                    '--kml', 'no',
                    '--csv', 'no']

        with self.assertLogs(logger=archmap.log, level='WARNING') as logcatcher:
            archmap.main()
        self.assertIn('WARNING:archmap:{}'.format(self.no_config_msg), logcatcher.output)

    def test_default_config_file(self):
        sys.argv = ['test',
                    '--config', './archmap.conf',
                    '--text', 'no',
                    '--geojson', 'no',
                    '--kml', 'no',
                    '--csv', 'no']

        with self.assertLogs(logger=archmap.log, level='WARNING') as logcatcher:
            archmap.main()
        self.assertNotIn('WARNING:archmap:{}'.format(self.no_config_msg), logcatcher.output)


class LogLevelTestCase(unittest.TestCase):
    """These tests check that the logging levels are set correctly
    """

    def setUp(self):
        logging.disable(logging.NOTSET)

    def tearDown(self):
        logging.disable(60)

    def test_10(self):
        sys.argv = ['test',
                    '-vv',
                    '--text', 'no',
                    '--geojson', 'no',
                    '--kml', 'no',
                    '--csv', 'no']

        with self.assertLogs() as logcatcher:
            archmap.main()
            del(logcatcher)
        self.assertEqual(archmap.log.level, 10)

    def test_20(self):
        sys.argv = ['test',
                    '-v',
                    '--text', 'no',
                    '--geojson', 'no',
                    '--kml', 'no',
                    '--csv', 'no']

        with self.assertLogs() as logcatcher:
            archmap.main()
            del(logcatcher)
        self.assertEqual(archmap.log.level, 20)

    def test_50(self):
        sys.argv = ['test',
                    '--quiet',
                    '--text', 'no',
                    '--geojson', 'no',
                    '--kml', 'no',
                    '--csv', 'no']

        with self.assertLogs() as logcatcher:
            archmap.main()
            del(logcatcher)
        self.assertEqual(archmap.log.level, 50)


class ConfigFileTestCase(unittest.TestCase):
    """These tests check that the config file is correct
    """

    def test_options(self):
        default_config = configparser.ConfigParser()
        default_config.read('./archmap.conf')

        test_config = configparser.ConfigParser()
        test_config['files'] = {'url': 'https://wiki.archlinux.org/index.php/ArchMap/List',
                                'file': '',
                                'text': '/tmp/archmap.txt',
                                'geojson': '/tmp/archmap.geojson',
                                'kml': '/tmp/archmap.kml',
                                'csv': '/tmp/archmap.csv'}
        test_config['extras'] = {'verbosity': '1',
                                 'pretty': 'False'}

        self.assertEqual(default_config, test_config)


if __name__ == '__main__':
    unittest.main()
